{"name":"Sidekiq-delay","tagline":"","body":"# Sidekiq::Delay [![Build Status](https://secure.travis-ci.org/dlibanori/sidekiq-delay.png)](http://travis-ci.org/dlibanori/sidekiq-delay) [![Code Climate](https://codeclimate.com/github/dlibanori/sidekiq-delay.png)](https://codeclimate.com/github/dlibanori/sidekiq-delay) [![Coverage Status](https://coveralls.io/repos/dlibanori/sidekiq-delay/badge.png)](https://coveralls.io/r/dlibanori/sidekiq-delay)\r\n\r\nWouldn't be nice if you could easily queue model method calls to Sidekiq? With **Sidekiq::Delay** you can!\r\n\r\nYou have just to include a module and call `delay` before any method call. Actually, your model class have to respond to some methods, but if you are using `ActiveRecord` or `Mongoid` they already do.\r\n\r\n**NOTE**: It doesn't support `block` arguments.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'sidekiq-delay'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install sidekiq-delay\r\n\r\n## Usage\r\n\r\nFirst you have to include `Sidekiq::Delay` at your model.\r\n\r\n```ruby\r\n  class Band\r\n    include Mongoid::Document\r\n    include Sidekiq::Delay\r\n\r\n    field :name\r\n\r\n    def play!\r\n      # a long task\r\n      sleep 3\r\n    end\r\n  end\r\n```\r\n\r\nNow you can `delay` method calls to a Sidekiq queue.\r\n\r\n```ruby\r\n  band = Band.create(name: 'Daft Punk')\r\n  band.delay.play!\r\n```\r\n\r\n## How it works\r\n\r\nIt queues an job with model class, model id, method name and args. Later, at Sidekiq, it finds your model using class and id and calls method with args. Your class must respond to `find(id)` and return same model.\r\n\r\n**NOTE**: Your model must be stored at database before `delay` any call.\r\n\r\n## Custom works\r\n\r\nWhat if you class doesn't respond to `find` or you want to use another `Sidekiq` plugin? You can easily write an **custom worker**. You have just to set your model to use it with `worker` method.\r\n\r\nYour worker just need to include `Sidekiq::Delay::Strategy` or extend `Sidekiq::Delay::Worker`.\r\n\r\n```ruby\r\n  class TeamWorker\r\n    include Sidekiq::Worker\r\n    include Sidekiq::Delay::Strategy\r\n\r\n    def record(klass, id)\r\n      klass.custom_find(id)\r\n    end\r\n  end\r\n\r\n  class Team\r\n    include Mongoid::Document\r\n    include Sidekiq::Delay\r\n\r\n    worker TeamWorker\r\n\r\n    field :name\r\n\r\n    def self.custom_find(id)\r\n      find(id)\r\n    end\r\n\r\n    def play!\r\n      # a long task\r\n      sleep 3\r\n    end\r\n  end\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}